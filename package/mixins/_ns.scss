@use 'sass:string';

@use '../vars/config';
@use 'fn';

// BEM
$-B: '';

@mixin b($blocks...) {
  $-B: joinBlock($blocks) !global;

  #{$-B} {
    @content;
  }
}

@mixin e($elements...) {
  $blocks: string.split($-B, ',');
  $curSelector: selectorHandle($elements, $blocks);

  @if fn.hitAllSpecialNestRule(&) {
    @at-root & {
      #{$curSelector} {
        @content;
      }
    }
  } @else {
    @at-root #{$curSelector} {
      @content;
    }
  }
}

@mixin m($modifiers...) {
  @at-root {
    #{selectorHandle($modifiers, &, 'mod')} {
      @content;
    }
  }
}

@mixin when($state) {
  @at-root &.#{'is-' + $state} {
    @content;
  }
}

@mixin dark($block) {
  html.dark {
    @include b($block) {
      @content;
    }
  }
}

@function bem($block, $element: null, $modifier: null) {
  $el: if($element, config.$element-separator + $element, '');
  $mod: if($modifier, config.$modifier-separator + $modifier, '');

  @return fn.join-ns($block) + $el + $mod;
}

@function joinBlock($list) {
  $result: '';
  $len: length($list);

  @for $i from 1 through $len {
    $item: nth($list, $i);
    $result: $result + '.' + config.$namespace + '-' + $item;

    @if $i < $len and $item != '' {
      $result: $result + ',';
    }
  }
  @return $result;
}

@function selectorHandle($list, $parent, $mode: 'el') {
  $separator: if($mode == 'el', config.$element-separator, config.$modifier-separator);
  $result: '';

  @each $item in $parent {
    @each $unit in $list {
      $result: $result + $item + $separator + $unit + ',';
    }
  }

  @return $result;
}
