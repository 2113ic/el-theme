@use 'config' as cfg;
@use 'vars';

@mixin utils-clearfix {
  $selector: &;

  @at-root {
    #{$selector}::before,
    #{$selector}::after {
      display: table;
      content: '';
    }
    #{$selector}::after {
      clear: both;
    }
  }
}

@mixin utils-vertical-center {
  $selector: &;

  @at-root {
    #{$selector}::after {
      display: inline-block;
      content: '';
      height: 100%;
      vertical-align: middle;
    }
  }
}

@mixin utils-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin utils-inline-flex-center {
  display: inline-flex;
  justify-content: center;
  align-items: center;
}

// Break-points
@mixin res($key, $map: vars.$breakpoints) {
  // loop breakpoint Map, return if present
  @if map-has-key($map, $key) {
    @media only screen and #{unquote(map-get($map, $key))} {
      @content;
    }
  } @else {
    @warn "Undefined points: `#{$map}`";
  }
}

// Scrollbar
@mixin scroll-bar {
  &::-webkit-scrollbar {
    z-index: 11;
    width: 6px;

    &:horizontal {
      height: 6px;
    }

    &-thumb {
      width: 6px;
      border-radius: 5px;
      background: fn.getCSSVar('text-color', 'disabled');
    }

    &-corner, &-track, &-piece {
      background: fn.getCSSVar('fill-color', 'blank');
    }

    &-track &-piece {
      width: 6px;
    }
  }
}

// BEM
$B: '';
$E: '';
$M: '';

@mixin b($block) {
  $B: cfg.$namespace + '-' + $block !global;

  .#{$B} {
    @content;
  }
}

@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $curSelector: '';

  @each $unit in $element {
    $curSelector: #{$curSelector + '.' + $B + cfg.$element-separator + $unit + ','};
  }

  @if fn.hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$curSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$curSelector} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $curSelector: '';

  @each $unit in $modifier {
    $curSelector: #{$curSelector + $selector + cfg.$modifier-separator + $unit + ','};
  }

  @at-root {
    #{$curSelector} {
      @content;
    }
  }
}

@mixin configurable-m($modifier, $E-flag: false) {
  $selector: &;
  $interpolation: '';

  @if $E-flag {
    $interpolation: cfg.$element-separator + $E-flag;
  }

  @at-root {
    #{$selector} {
      .#{$B + $interpolation + cfg.$modifier-separator + $modifier} {
        @content;
      }
    }
  }
}

@mixin spec-selector(
  $specSelector: '',
  $element: $E,
  $modifier: false,
  $block: $B
) {
  $modifierCombo: '';

  @if $modifier {
    $modifierCombo: cfg.$modifier-separator + $modifier;
  }

  @at-root {
    #{&}#{$specSelector}.#{$block + cfg.$element-separator + $element + $modifierCombo} {
      @content;
    }
  }
}

@mixin meb($modifier: false, $element: $E, $block: $B) {
  $selector: &;
  $modifierCombo: '';

  @if $modifier {
    $modifierCombo: cfg.$modifier-separator + $modifier;
  }

  @at-root {
    #{$selector} {
      .#{$block + cfg.$element-separator + $element + $modifierCombo} {
        @content;
      }
    }
  }
}

@mixin when($state) {
  @at-root {
    &.#{cfg.$state-prefix + $state} {
      @content;
    }
  }
}

@mixin extend-rule($name) {
  @extend #{'%shared-' + $name} !optional;
}

@mixin share-rule($name) {
  $rule-name: '%shared-' + $name;

  @at-root #{$rule-name} {
    @content;
  }
}

@mixin pseudo($pseudo) {
  @at-root #{& + ':#{$pseudo}'} {
    @content;
  }
}

@mixin picker-popper($background, $border, $box-shadow) {
  &.#{cfg.$namespace}-popper {
    background: $background;
    border: $border;
    box-shadow: $box-shadow;

    .#{cfg.$namespace}-popper__arrow {
      &::before {
        border: $border;
      }
    }

    @each $placement, $adjacency in ('top': 'left', 'bottom': 'right', 'left': 'bottom', 'right': 'top') {
      &[data-popper-placement^='#{$placement}'] {
        .#{cfg.$namespace}-popper__arrow::before {
          border-#{$placement}-color: transparent;
          border-#{$adjacency}-color: transparent;
        }
      }
    }
  }
}

// dark
@mixin dark($block) {
  html.dark {
    @include b($block) {
      @content;
    }
  }
}

@mixin inset-input-border($color, $important: false) {
  @if $important == true {
    box-shadow: 0 0 0 1px $color inset !important;
  } @else {
    box-shadow: 0 0 0 1px $color inset;
  }
}
