@use 'sass:map';

@use 'config' as cfg;
@use 'fn';

@mixin ns($block) {
  .#{fn.join-ns($block)} {
    @content;
  }
}

@mixin each-types {
  @each $type in cfg.$types {
    @content($type);
  }
}

/// set css var value, because we need translate value to string
/// @example scss
///   @include set-css-var-value(('color', 'primary'), red);
///   // --el-color-primary: red;
@mixin set-css-var-value($name, $value) {
  #{fn.joinVarName($name)}: #{$value};
}

@mixin set-css-color-type($colors, $type) {
  @include set-css-var-value(('color', $type), map.get($colors, $type, 'base'));

  @each $i in (3, 5, 7, 8, 9) {
    @include set-css-var-value(
      ('color', $type, 'light', $i),
      map.get($colors, $type, 'light-#{$i}')
    );
  }

  @include set-css-var-value(
    ('color', $type, 'dark-2'),
    map.get($colors, $type, 'dark-2')
  );
}

/// set all css var for component by map
@mixin set-component-css-var($name, $variables) {
  @each $attribute, $value in $variables {
    @if $attribute == 'default' {
      #{fn.getCSSVarName($name)}: #{$value};
    } @else {
      #{fn.getCSSVarName($name, $attribute)}: #{$value};
    }
  }
}

/// common/$colors only
@mixin set-css-color-rgb($colors, $type) {
  $color: map.get($colors, $type, 'base');

  @include set-css-var-value(
    ('color', $type, 'rgb'),
    #{red($color),green($color),blue($color)}
  );
}

/// @example scss 
///   @include set-css-var-type('color', 'primary', $map);
///   // --el-color-primary: #{map.get($map, 'primary')};
@mixin set-css-var-type($name, $type, $variables) {
  #{fn.getCSSVarName($name, $type)}: #{map.get($variables, $type)};
}

/// generate css var from existing css var
/// @example scss
///   @include css-var-from-global(('button', 'text-color'), ('color', $type))
///   // --el-button-text-color: var(--el-color-#{$type});
@mixin css-var-from-global($var, $gVar) {
  #{fn.joinVarName($var)}: var(#{fn.joinVarName($gVar)});
}
