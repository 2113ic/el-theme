@use 'sass:map';

@use '@el-theme/common/vars' as *;
@use '@el-theme/mixins' as *;

@include b('picker') {
  @include e('popper') {
    @include set-css-var-type('datepicker', 'border-color', $datepicker);

    @include picker-popper(
      getCSSVar('bg-color', 'overlay'),
      1px solid getCSSVar('datepicker', 'border-color'),
      getCSSVar('box-shadow', 'light')
    );
  }
}

@include b('date-editor') {
  @include set-component-css-var('date-editor', $date-editor);
  @include set-component-css-var('input', $input);
}

@include b('date-editor') {
  position: relative;
  text-align: left;
  vertical-align: middle;

  &.#{bem('input', 'wrapper')} {
    @include inset-input-border(
      getCSSVarWithDefault(
        'input-border-color',
        map.get($input, 'border-color')
      )
    );

    &:hover {
      @include inset-input-border(
        getCSSVar('input', 'hover-border-color')
      );
    }
  }

  &.#{bem('input')},
  &.#{bem('input', 'wrapper')} {
    width: getCSSVar('date-editor-width');
    height: var(
      getCSSVarName('input-height'), 
      getCSSVar('component-size')
    );
  }

  @include m('monthrange') {
    @include css-var-from-global(
      'date-editor-width',
      'date-editor-monthrange-width'
    );
  }

  @include m('daterange', 'timerange') {
    @include css-var-from-global(
      'date-editor-width',
      'date-editor-daterange-width'
    );
  }

  @include m('datetimerange') {
    @include css-var-from-global(
      'date-editor-width',
      'date-editor-datetimerange-width'
    );
  }

  @include m('dates') {
    .#{bem('input', 'wrapper')} {
      text-overflow: ellipsis;
      white-space: nowrap;
    }
  }

  .close-icon {
    cursor: pointer;
  }

  .clear-icon {
    cursor: pointer;

    &:hover {
      color: getCSSVar('text-color', 'secondary');
    }
  }

  .#{bem('range', 'icon')} {
    height: inherit;
    font-size: 14px;
    color: getCSSVar('text-color', 'placeholder');
    float: left;

    svg {
      vertical-align: middle;
    }
  }

  .#{bem('range-input')} {
    display: inline-block;
    width: 39%;
    height: #{map.get($input-height, 'default') - 2};
    margin: 0;
    padding: 0;
    appearance: none;
    line-height: #{map.get($input-height, 'default') - 2};
    border: none; outline: none;
    text-align: center;
    font-size: getCSSVar('font-size', 'base');
    color: getCSSVar('text-color', 'regular');
    background-color: transparent;

    &::placeholder {
      color: getCSSVar('text-color', 'placeholder');
    }
  }

  .#{bem('range-separator')} {
    flex: 1;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    padding: 0 5px;
    margin: 0;
    font-size: 14px;
    color: getCSSVar('text-color', 'primary');
    overflow-wrap: break-word;
  }

  .#{bem('range', 'close-icon')} {
    width: unset;
    height: inherit;
    font-size: 14px;
    color: getCSSVar('text-color', 'placeholder');
    cursor: pointer;

    &:hover {
      color: getCSSVar('text-color', 'secondary');
    }

    svg {
      vertical-align: middle;
    }

    @include m('hidden') {
      opacity: 0;
      visibility: hidden;
    }
  }
}

@include b('range-editor') {
  &.#{bem('input', 'wrapper')} {
    display: inline-flex;
    align-items: center;
    padding: 0 10px;
  }

  @include when('active') {
    @include inset-input-border(#{getCSSVar('input', 'focus-border-color')});

    &:hover {
      @include inset-input-border(#{getCSSVar('input', 'focus-border-color')});
    }
  }

  @each $size in ('large', 'small') {
    @include m($size) {
      line-height: getCSSVar('component-size', $size);

      &.#{bem('input', 'wrapper')} {
        height: getCSSVar('component-size', $size);
      }

      &.#{bem('range', 'separator')} {
        line-height: map.get($input-line-height, $size);
        font-size: map.get($input-font-size, $size);
      }

      .#{bem('range', 'input')} {
        height: #{map.get($input-height, $size) - 2};
        line-height: #{map.get($input-height, $size) - 2};
        font-size: map.get($input-font-size, $size);
      }
    }
  }

  @include when('disabled') {
    background-color: map.get($input-disabled, 'fill');
    border-color: map.get($input-disabled, 'border');
    color: map.get($input-disabled, 'text-color');
    cursor: not-allowed;

    &:hover,
    &:focus {
      border-color: map.get($input-disabled, 'border');
    }

    input {
      background-color: map.get($input-disabled, 'fill');
      color: map.get($input-disabled, 'text-color');
      cursor: not-allowed;

      &::placeholder {
        color: map.get($input-disabled, 'placeholder-color');
      }
    }

    .#{bem('range', 'separator')} {
      color: map.get($input-disabled, 'text-color');
    }
  }
}
